package com.company;

import java.awt.*;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.TimeUnit;
import javax.swing.*;
import java.text.DecimalFormat;

/**
 * Class for app. App is created by masterGUI. Runs new games every time with playGame
 */
public class App{                      // App class, handles all the functionality of the game
    /**
     * Word generated by the game for user to type.
     */
    public String randomWord;           // word generated by the game
    /**
     * Holds value of how many words the user have left to type before the game finishes.
     */
    public int wordsLeft;           // value for words left in the game
    /**
     * Holds value of how many words the bot has, is set same as user at the beginning.
     */
    public int enemyWordsLeft = wordsLeft;
    /**
     * Boolean for if the game can generate a new word.
     */
    private boolean inputFlag = false;  // boolean for if the game can generate a new word
    /**
     * Value for how many characters the user has gotten right.
     */
    private int correct_chars;          // correct characters that the user has typed
    /**
     * Total characters for all words generated, used for getting accuracy.
     */
    private int total_chars;            // total characters for all words generated, used for getting accuracy
    /**
     * Time in seconds for how long it takes the user to type all words.
     */
    private float duration;             // time in seconds for how long it takes the user to type all words
    /**
     * Value for words per minute of the user.
     */
    private int wpm;                    // words per minute, gets displayed at the end
    public JLabel title;
    public JLabel user;
    public JLabel enemy;
    /**
     * Boolean that prevents the game from starting unless true.
     */
    private boolean start = false;
    /**
     * Variable used to determine difficulty.
     */
    private int difficulty;
    /**
     * Boolean that determines when user can progress to the results screen.
     */
    public boolean resultsFlag = false;
    /**
     * Boolean that determines the outcome of the game (win or loss).
     */
    private boolean winner = true;
    private JTextField textBox;
    private ArrayList<String> words = new ArrayList<String>();

    /**
     * Sets local JLabels as JLabels used in masterGUI
     * @param title The title of the program
     * @param user The display for the words
     * @param wordsLeft The amount of words left
     * @throws IOException
     */
    public void game(JLabel title, JLabel user, int wordsLeft, JTextField textBox) throws IOException{
        this.title = title;
        this.user = user;
        this.wordsLeft = wordsLeft;
        this.textBox = textBox;
    }

    /**
     * Sets the difficulty of the game
     * @param difficulty The int for the difficulty of the game
     */
    public void set_difficulty(int difficulty) {
        this.difficulty = difficulty;
    }

    /**
     * Compares the two strings given. Adds them to total and correct characters
     * @param randomWord The random word that the computer generated
     * @param title  The title of the program to be updated
     * @param userWord The word that the user typed
     */
    public void get_characters(String randomWord, String userWord, JLabel title) { // user word checker method
        randomWord = randomWord.toLowerCase(Locale.ROOT);
        userWord = userWord.toLowerCase(Locale.ROOT);
        total_chars += randomWord.length();     // adds generate word's length to total characters integer
        if (userWord.equals(randomWord)) {      // simplifies adding length if the two words are equal
            System.out.println("Correct!\n");   // shows a message saying 'correct' if they got it right
            correct_chars += randomWord.length();
        } else {                                // if two words are different, it goes to this
            System.out.println("Incorrect!\n");
            for (int i = 0; i != randomWord.length(); i++) {   // runs for the length of randomWord
                try {
                    if (userWord.charAt(i) == randomWord.charAt(i)) {
                        correct_chars++;
                    }
                } catch (StringIndexOutOfBoundsException e) {
                    ;
                }
            }
        }
    }
    /**
     * Runs the main typing game of the program
     */
    public void playGame(){
        title.setFont(new Font("Courier", Font.BOLD, 40));
        resultsFlag = false;
        wordsLeft = 20;
        GlorifiedTimer bot = new GlorifiedTimer(); // creates new bot to play against
        bot.set_values(wordsLeft, enemy);
        bot.setDifficulty(difficulty);  // setting the difficulty of the bot
        Random rand = new Random();
        WordList wordList = null; // uses the WordList class to get the list of words
        try {
            wordList = new WordList();
        } catch (IOException e) {
            e.printStackTrace();
        }
        total_chars = 0; // resetting game values
        correct_chars = 0;
        wpm = 0;
        long startTimer = 0;
        long endTimer = 0;
        duration = 0;
        inputFlag = false;
        winner = true;
        words.clear();
        while (!start) {  // waiting for the game to start
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        if (difficulty == 1) {  // creating list of words for maximum efficiency
            for (int i = wordsLeft; i != 0; i--) {
                words.add(wordList.easyWords.get(rand.nextInt(wordList.easyWords.size())).toLowerCase(Locale.ROOT));
            }
        }
        else if (difficulty == 2){
            for (int i = wordsLeft; i != 0; i--) {
                words.add(wordList.mediumWords.get(rand.nextInt(wordList.mediumWords.size())).toLowerCase(Locale.ROOT));
            }
        }
        else if (difficulty == 3){
            for (int i = wordsLeft; i != 0; i--) {
                words.add(wordList.hardWords.get(rand.nextInt(wordList.hardWords.size())).toLowerCase(Locale.ROOT));
            }
        }
        textBox.requestFocus();
        countDown();  // creating a 3 second countdown
        user.setVisible(true);
        enemy.setVisible(true);
        startTimer = System.currentTimeMillis();   // start timer for typing game
        bot.run_timer(); // starting the bot
        while(wordsLeft != 0) { // runs until there are no more words left
            try {
                bot.check_timer(); // checks timer ever cycle to see if the bot has typed any words
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (Integer.parseInt(enemy.getText()) == 0) {
                winner = false;
                break;
            }
            while (!inputFlag) // only runs while the flag for input flag is not active
            {
                try {
                    randomWord = words.get(wordsLeft - 1); // gets a word from the random arraylist
                    title.setText(randomWord);
                    change_flag();
                    user.setText(String.valueOf(wordsLeft));
                }
                catch(IndexOutOfBoundsException ex){ // breaks out of loop if index is out of range
                    break;
                }
            }
        }
        enemy.setVisible(false); // changes to winner/loser screen
        user.setVisible(false);
        change_flag();
        title.setFont(new Font("Courier", Font.BOLD, 25));
        if (winner){
            title.setText("Winner! Press enter for results");
        }
        else{
            title.setText("Loser! Press enter for results");
        }
        endTimer = System.currentTimeMillis(); // end timer at the end of the typing game
        duration = (float) (endTimer - startTimer) / 1000;// duration in millisecond
        get_WPM();
        resultsFlag = true;
        start = false;
    }

    /**
     * Does a three-second countdown, outputs to title
     */
    public void countDown(){
        for (int i = 3; i != 0; i--) {  // countdown before the start of the typing game
            title.setText(String.valueOf(i));
            // tArea.append(String.valueOf(i) + "\n");
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }


    /**
     * Calculates the words per minute. Default method
     */
    public void get_WPM() { // method for calculating the wpm
        float prop = (float) 60 / (duration); // proportion for if user was typing for 60 seconds
        wpm = (int) (correct_chars * prop) / 5; // proportion times chars for chars in 1 minute, / 5 for wpm
        double accuracy = (double) correct_chars / total_chars * 100.0;
        DecimalFormat df = new DecimalFormat("####0.0");
    }

    /**
     * Calculates the words per minute after the playGame ends. Outputs the results on the GUI.
     */
    public void get_WPM(JLabel WPM, JLabel Accu) { // method for calculating the wpm
        float prop = (float) 60 / (duration); // proportion for if user was typing for 60 seconds
        wpm = (int) (correct_chars * prop) / 5; // proportion times chars for chars in 1 minute, / 5 for wpm
        WPM.setText("WPM: " + wpm);
        //System.out.println("Correct characters: " + correct_chars + " Total characters: " + total_chars);
        double accuracy = (double) correct_chars / total_chars * 100.0;
        DecimalFormat df = new DecimalFormat("####0.0");
        Accu.setText("Accuracy " + df.format(accuracy) + "%");
        //System.out.println("Accuracy " + df.format(accuracy) + "%");
    }

    /**
     * Flips the sign on the input flag. Useful for keeping track if the user needs a new word
     */
    public void change_flag() { // handles changing the flag
        if (inputFlag) {         // just switches the flag back and forth
            inputFlag = false;
            wordsLeft--;
            ;      // removes the words left when changing this flag
        } else {
            inputFlag = true;
        }
    }

    /**
     * Method called by masterGUI. playGame waits  until this method is run to start the game
     */
    public void run() {
        start = true;
    }

    /**
     * Sets the new JLabel for the enemy words left
     */
    public void set_enemy(JLabel enemy){
        this.enemy = enemy;
    }

}


